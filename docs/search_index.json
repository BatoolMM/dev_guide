[
["index.html", "rOpenSci Packages: Development, Maintenance, and Peer Review Preface", " rOpenSci Packages: Development, Maintenance, and Peer Review rOpenSci onboarding editors 2018-03-26 Preface This is the very first part of the book. "],
["packaging-guide.html", "Chapter 1 Packaging Guide 1.1 Package naming 1.2 Function/variable naming &amp; general syntax 1.3 README 1.4 Documentation 1.5 Authorship 1.6 Testing 1.7 Examples 1.8 Package dependencies 1.9 Recommended scaffolding 1.10 Console messages 1.11 Miscellaneous CRAN gotchas 1.12 Further guidance", " Chapter 1 Packaging Guide rOpenSci accepts packages that meet our guidelines via a streamlined onboarding process. To ensure a consistent style across all of our tools we have developed this concise guide. We strongly recommend that package developers read Hadley Wickham’s concise but thorough book on package development which is available for free online (and print). 1.1 Package naming We strongly recommend short, descriptive names in lower case. If your package deals with one or more commercial services, please make sure the name does not violate branding guidelines. You can check if your package name is available, informative and not offensive by using the available package. 1.2 Function/variable naming &amp; general syntax We strongly recommend snake_case over all other styles unless you are porting over a package that is already in wide use. Avoid function name conflicts with base packages or other popular ones (e.g. ggplot2, dplyr, magrittr, data.table) Consider an object_verb() naming scheme for functions in your package that take a common data type or interact with a common API. object refers to the data/API and verb the primary action. This scheme helps avoid namespace conflicts with packages that may have similar verbs, and makes code readable and easy to auto-complete. For instance, in stringi, functions starting with stri_ manipulate strings (stri_join(), stri_sort(), and in googlesheets functions starting with gs_ are calls to the Google Sheets API (gs_auth(), gs_user(), gs_download()). For functions that manipulate an object/data and return an object/data of the same type, make the object/data the first argument of the function so as to enhance compatibility with the pipe operator (%&gt;%) For more information on how to style your code, name functions, and R scripts inside the R/ folder, we recommend reading the code chapter in Hadley’s book. 1.3 README All packages should have a README file, named README.md, in the root of the repository. The README should include, from top to bottom (see this example): * The package name * Badges for continuous integration and test coverage, the badge for rOpenSci peer-review once it has started (see below), and any other badges * Short description of the package * Installation instructions * Brief demonstration usage * If applicable, how the package compares to other similar packages and/or how it relates to other packages * Citation information Once you have submitted a package and it has passed editor checks, add a peer-review badge via [![](https://badges.ropensci.org/&lt;issue_id&gt;_status.svg)](https://github.com/ropensci/onboarding/issues/&lt;issue_id&gt;) where issue_id is the number of the issue in the onboarding repository. For instance, the badge for rtimicropem review uses the number 126 since it’s the review issue number. The badge will first indicated “under review” and then “peer-reviewed” once your package has been onboarded, and will link to the review issue. If your package connects to a data source or online service, or wraps other software, consider that your package README may be the first point of entry for users. It should provide enough information for users to understand the nature of the data, service, or software, and provide links to other relevant data and documentation. For instance, a README should not merely read, “Provides access to GooberDB,” but also include, “…, an online repository of Goober sightings in South America. More information about GooberDB, and documentation of database structure and metadata can be found at link. We recommend not creating README.md directly, but from a README.Rmd file (an Rmarkdown file) if you have any demonstration code. The advantage of the .Rmd file is you can combine text with code that can be easily updated whenever your package is updated. Extensive examples should be kept for a vignette. If you want to make the vignettes more accessible before installing the package, we suggest creating a website for your package with pkgdown. Here is a good tutorial to get started with pkgdown. Consider using devtools::use_readme_rmd() to get a template for a README.Rmd file and to automatically set up a pre-commit hook to ensure that README.md is always newer than README.Rmd. After a package is accepted, the rOpenSci footer should be added to the bottom of the README file with the following markdown line: [![ropensci_footer](http://ropensci.org/public_images/github_footer.png)](http://ropensci.org) See the gistr README for a good example README to follow. 1.4 Documentation All exported package functions should be fully documented with examples. The package should contain top-level documentation for ?foobar, (or ?foobar-package if there is a naming conflict). Optionally, you can use both ?foobar and ?foobar-package for the package level manual file, using @aliases roxygen tag. The package should contain at least one vignette providing an introduction to the primary package functions and use-cases. As is the case for a README, top-level documentation or vignettes may be the first point of entry for users. If your package connects to a data source or online service, or wraps other software, it should provide enough information for users to understand the nature of the data, service, or software, and provide links to other relevant data and documentation. For instance, a the vignette intro or documentation should not merely read, “Provides access to GooberDB,” but also include, “…, an online repository of Goober sightings in South America. More information about GooberDB, and documentation of database structure and metadata can be found at link. We strongly encourage all submissions to use roxygen2 for documentation. roxygen2 is an R package that automatically compiles .Rd files to your man folder in your package from simple tags written above each function. More information on using roxygen2 documentation is available on the R packages book. One key advantage of using roxygen2 is that your NAMESPACE will always be automatically generated and up to date. When using roxygen2, add #' @noRd to internal functions. 1.5 Authorship The DESCRIPTION file of a package should list package authors and contributors to a package, using the Authors@R syntax to indicate their roles (author/creator/contributor etc.) if there is more than one author. See this section of “Writing R Extensions” for details. If you feel that your reviewers have made a substantial contribution to the development of your package, you may list them in the Authors@R field with a Reviewer contributor type (&quot;rev&quot;), like so: person(&quot;Bea&quot;, &quot;Hernández&quot;, role = &quot;rev&quot;, comment = &quot;Bea reviewed the package for ropensci, see &lt;https://github.com/ropensci/onboarding/issues/116&gt;&quot;), Only include reviewers after asking for their consent. Note that ‘rev’ will raise a CRAN NOTE unless the package is built using R v3.5 (r-devel as of 2017-09-21). Please do not list editors as contributors. Your participation in and contribution to rOpenSci is thanks enough. 攼㹤愼㸰戼㹤攼㹤戼㸹㠼㸲 1.6 Testing All packages should pass R CMD check/devtools::check() on all major platforms. All packages should have a test suite that covers major functionality of the package. We recommend using testthat for writing tests. Strive to write tests as you write each new function. This serves the obvious need to have proper testing for the package, but allows you to think about various ways in which a function can fail, and to defensively code against those. More information. testthat has a function skip_on_cran() that you can use to not run tests on CRAN. We recommend using this on all functions that are API calls since they are quite likely to fail on CRAN. These tests will still run on Travis. Check the extent of your test coverage using the covr package. Including a coverage badge in your package’s README makes it easy for reviewers to see how well-tested your package is. 100% coverage is not required, but editors and reviewers will use coverage reports as a starting point to evaluate that your test suite covers the important functionality of your package. Even if your use continuous integration, we recommend that you run tests locally prior to submitting your package, as some tests are often skipped. (You may need to set Sys.setenv(NOT_CRAN=&quot;true&quot;) in order to ensure all tests are run.) In addition, we recommend that prior to submitting your package, you use Gabor Csardi’s goodpractice package to check your package for likely sources of errors, and run devtools::spell_check() to find spelling errors in documentation. 1.7 Examples Include extensive examples in the documentation. In addition to demonstrating how to use the package, these can act as an easy way to test package functionality before there are proper tests. However, keep in mind we require tests in contributed packages. If you prefer not to clutter up code with extensive documentation, place further documentation/examples in files in a man-roxygen folder in the root of your package, and those will be combined into the manual file by the use of @template &lt;file name&gt;, for example. You can run examples with devtools::run_examples(). 1.8 Package dependencies Use Imports instead of Depends for packages providing functions from other packages. Make sure to list packages used for testing (testthat), and documentation (knitr, roxygen2) in your Suggests section of package dependencies. If you use any packages in your examples sections, make sure to list those, if not already listed elsewhere, in Enhances section of package dependencies. For most cases where you must expose functions from dependencies to the user, you should import and re-export those individual functions rather than listing them in the Depends fields. For instance, if functions in your package produce raster objects, you might re-export only printing and plotting functions from the raster package. 1.9 Recommended scaffolding For http requests we strongly recommend using httr over RCurl. For parsing JSON, use jsonlite instead of rjson or RJSONIO. For parsing, creating, and manipulating XML, we strongly recommend xml2 for most cases. 1.10 Console messages Use message() and warning() to communicate with the user in your functions. Please do not use print() or cat() unless it’s for a print.*() method, as these methods of printing messages are harder for the user to suppress. 1.11 Miscellaneous CRAN gotchas This is a collection of CRAN gotchas that are worth avoiding at the outset. Make sure your package title is in Title Case. Do not put a period on the end of your title Avoid starting the description with the package name or This package … Make sure you include links to websites if you wrap a web API, scrape data from a site, etc. in the Description field of your DESCRIPTION file Avoid long running tests and examples. Consider testthat::skip_on_cran in tests to skip things that take a long time but still test them locally and on Travis. Include top-level files such as paper.md, .travis.yml in your .Rbuildignore file. 1.12 Further guidance Hadley Wickham’s R Packages is an excellent, readable resource on package development and is available a a free book on the web. Writing R Extensions is the canonical, usually most up-to-date, reference for creating R packages. If you are submitting a package to rOpenSci via the onboarding repo, you can direct further questions to the rOpenSci team in the issue tracker, or in our discussion forum. "],
["continuous-integration-best-practices.html", "Chapter 2 Continuous Integration Best Practices 2.1 Continuous integration", " Chapter 2 Continuous Integration Best Practices Now I wonder if this is the best place since after onboarding things move. :thinking_face: That said the transfer will be part of the author guide. 2.1 Continuous integration All rOpenSci packages must use one form of continuous integration. This ensures that all commits, pull requests, and new branches are run through R CMD check. R is now a natively supported language on Travis-CI, making it easier than ever to do continuous integration. See R Packages and Julia Silge’s Beginner’s Guide to Travis-CI for R for more help. Travis offers continuous integration for Linux and Mac OSX. For continuous integration on Windows, see R + Appveyor. R packages that use compiled code or link to other libraries or languages should have CI for all platforms. R packages that use compiled code or link to other libraries or languages should have CI for all platforms. Continuous integration should also include reporting of test coverage via a testing service such CodeCov or Coveralls. See the README for the covr package for instructions, as well as devtools::use_coverage(). Both test status and code coverage should be reported via a badge in your package README. "],
["package-development-security-best-practices.html", "Chapter 3 Package Development Security Best Practices", " Chapter 3 Package Development Security Best Practices Link out to the bookdown started at unconf, and try to get that book updated. "],
["onboarding-why-what.html", "Chapter 4 Onboarding, Why? What?", " Chapter 4 Onboarding, Why? What? Intro to onboarding. Explain roles. Include links to talks, and link to the blog post tag corresponding to posts about onboarding. "],
["onboarding-guide-for-authors.html", "Chapter 5 Onboarding Guide for Authors", " Chapter 5 Onboarding Guide for Authors Mention the possibility to add reviewers as “rev” here again. "],
["onboarding-guide-for-reviewers.html", "Chapter 6 Onboarding Guide for Reviewers", " Chapter 6 Onboarding Guide for Reviewers "],
["onboarding-guide-for-editors.html", "Chapter 7 Onboarding Guide for Editors", " Chapter 7 Onboarding Guide for Editors "],
["collaboration-guide.html", "Chapter 8 Collaboration Guide 8.1 Code of Conduct", " Chapter 8 Collaboration Guide Link to happygit. Standard files (COC, contributing, github) gitflow How to welcome new contributors, bus factor. 8.1 Code of Conduct We recommend that you use a code of conduct such as the Contributor Covenant in developing your package. You can document your code of conduct in a CODE_OF_CONDUCT.md or CONDUCT.md file in the package root directory, and linking to this file from the README.md file. devtools::use_code_of_conduct() will add the Contributor Covenant template to your package. "],
["releasing-and-advertising-a-package.html", "Chapter 9 Releasing and advertising a package 9.1 News 9.2 Versioning", " Chapter 9 Releasing and advertising a package Various things about releases. Recommend submitting use cases to the NEWSLETTER + keeping them in a part of the README. 9.1 News It is mandatory to use a NEWS or NEWS.md file in the root of your package. See the sample NEWS file Update the news file before every CRAN release, with a section with the package name, version and date of release, like: foobar 0.2.0 (2016-04-01) ========================= Under that header, put in sections as needed, including: NEW FEATURES, MINOR IMPROVEMENTS, BUG FIXES, DEPRECATED AND DEFUNCT. Under each header list items as needed. For each item give a description of the new feature, improvement, bug fix, or deprecated function/feature. Link to any related GitHub issue like (#12). The (#12) will resolve on GitHub in Releases to a link to that issue in the repo. After you have added a git tag and pushed up to GitHub, add the news items for that tagged version to a Release on the Releases tab in your GitHub repo with a title like pkgname v0.1.0 If you use NEWS, add it to .Rbuildignore, but not if you use NEWS.md 9.2 Versioning We strongly recommend that rOpenSci packages use semantic versioning. A detailed explanation is available on the description chapter. Git tag each release after every submission to CRAN. [more info] "]
]
